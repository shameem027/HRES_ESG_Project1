name: LLMOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'aulas/aula3_case_study/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'aulas/aula3_case_study/**'
  workflow_dispatch:
    inputs:
      model_name:
        description: 'LLM model to use'
        required: false
        default: 'llama2:7b'
        type: choice
        options:
          - 'llama2:7b'
          - 'llama2:13b'
          - 'mistral:7b'

env:
  WORKING_DIR: aulas/aula3_case_study
  DOCKER_COMPOSE_FILE: aulas/aula3_case_study/docker/docker-compose.yml

jobs:
  # Stage 1: Infrastructure Validation
  infrastructure-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Validate Docker Compose Configuration
      run: |
        cd ${{ env.WORKING_DIR }}/docker
        docker-compose config --quiet
        echo "✅ Docker Compose configuration is valid"

    - name: Validate LLMOps Dependencies
      run: |
        cd ${{ env.WORKING_DIR }}/docker
        echo "🔍 Checking LLMOps dependencies..."
        
        # Check if all required packages are in requirements.txt
        required_packages=("ollama" "langchain" "rouge-score" "sentence-transformers")
        for package in "${required_packages[@]}"; do
          if grep -q "$package" requirements.txt; then
            echo "✅ $package found in requirements.txt"
          else
            echo "❌ $package missing from requirements.txt"
            exit 1
          fi
        done

    - name: Lint Python Code
      run: |
        cd ${{ env.WORKING_DIR }}
        pip install flake8
        echo "🔍 Linting Python files..."
        
        # Lint with relaxed rules for educational content
        find . -name "*.py" -exec flake8 {} \; --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "✅ Code linting completed"

    - name: Validate Airflow DAG Syntax
      run: |
        cd ${{ env.WORKING_DIR }}
        pip install apache-airflow==3.0.3
        echo "🔍 Validating Airflow DAG syntax..."
        
        python -m py_compile airflow/dags/llmops_plant_care.py
        echo "✅ Airflow DAG syntax is valid"

  # Stage 2: LLMOps Pipeline Testing
  llmops-testing:
    runs-on: ubuntu-latest
    needs: infrastructure-validation
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: airflow
          POSTGRES_DB: airflow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Dependencies
      run: |
        cd ${{ env.WORKING_DIR }}
        pip install --upgrade pip
        pip install -r docker/requirements.txt
        echo "✅ Dependencies installed"

    - name: Test Prompt Engineering Functions
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "🧪 Testing prompt engineering functions..."
        
        # Create a test script for prompt engineering
        cat > test_prompts.py << 'EOF'
        import sys
        sys.path.append('src')
        
        try:
            from llm_prompt_engineering import PlantCarePromptEngineer
            
            # Test dataset creation
            engineer = PlantCarePromptEngineer()
            dataset = engineer.create_plant_care_dataset()
            assert len(dataset) > 0, "Dataset should not be empty"
            print(f"✅ Dataset created with {len(dataset)} samples")
            
            # Test prompt design
            prompts = engineer.design_prompts()
            assert len(prompts) > 0, "Should have prompt templates"
            print(f"✅ Created {len(prompts)} prompt templates")
            
            # Test metrics calculation (mock)
            responses = ["Great advice!", "Very helpful."]
            expected = ["Good advice!", "Helpful response."]
            metrics = engineer._calculate_response_metrics(responses, expected)
            assert isinstance(metrics, dict), "Metrics should be a dictionary"
            print("✅ Metrics calculation working")
            
            print("🎉 All prompt engineering tests passed!")
            
        except Exception as e:
            print(f"❌ Test failed: {e}")
            sys.exit(1)
        EOF
        
        python test_prompts.py

    - name: Test API Functions
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "🧪 Testing API functions..."
        
        # Create a test script for API
        cat > test_api.py << 'EOF'
        import sys
        sys.path.append('api')
        
        try:
            from llm_app import app
            
            # Test Flask app creation
            assert app is not None, "Flask app should be created"
            print("✅ Flask app created successfully")
            
            # Test routes exist
            routes = [rule.rule for rule in app.url_map.iter_rules()]
            expected_routes = ['/health', '/chat', '/demo']
            
            for route in expected_routes:
                if route in routes:
                    print(f"✅ Route {route} found")
                else:
                    print(f"❌ Route {route} missing")
                    sys.exit(1)
            
            print("🎉 All API tests passed!")
            
        except Exception as e:
            print(f"❌ Test failed: {e}")
            sys.exit(1)
        EOF
        
        python test_api.py

    - name: Validate MLflow Integration
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "🔍 Testing MLflow integration..."
        
        # Start MLflow server for testing
        mlflow server --backend-store-uri sqlite:///test.db --default-artifact-root ./artifacts --host 0.0.0.0 --port 5000 &
        MLFLOW_PID=$!
        sleep 10
        
        # Test MLflow connection
        python -c "
        import mlflow
        import requests
        
        try:
            mlflow.set_tracking_uri('http://localhost:5000')
            mlflow.set_experiment('test-experiment')
            print('✅ MLflow connection successful')
        except Exception as e:
            print(f'❌ MLflow test failed: {e}')
            exit(1)
        "
        
        # Cleanup
        kill $MLFLOW_PID || true
        echo "✅ MLflow integration validated"

  # Stage 3: Integration Testing
  integration-testing:
    runs-on: ubuntu-latest
    needs: llmops-testing
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Build and Start Services
      run: |
        cd ${{ env.WORKING_DIR }}/docker
        echo "🚀 Starting LLMOps infrastructure..."
        
        # Start core services (without Ollama for CI speed)
        docker-compose up -d postgres mlflow
        
        # Wait for services to be ready
        echo "⏳ Waiting for services to be ready..."
        sleep 30
        
        # Check service health
        docker-compose ps
        echo "✅ Core services started"

    - name: Test Service Health Endpoints
      run: |
        cd ${{ env.WORKING_DIR }}/docker
        echo "🏥 Testing service health..."
        
        # Test MLflow
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -f http://localhost:5000/health > /dev/null 2>&1; then
            echo "✅ MLflow is healthy"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ MLflow health check failed after $max_attempts attempts"
            docker-compose logs mlflow
            exit 1
          fi
          
          echo "⏳ Attempt $attempt/$max_attempts - waiting for MLflow..."
          sleep 2
          ((attempt++))
        done

    - name: Test MLflow Experiments
      run: |
        echo "🧪 Testing MLflow experiment creation..."
        
        pip install mlflow requests
        
        python -c "
        import mlflow
        import requests
        
        try:
            mlflow.set_tracking_uri('http://localhost:5000')
            
            # Create test experiment
            experiment_name = 'ci-test-experiment'
            mlflow.set_experiment(experiment_name)
            
            # Log test metrics
            with mlflow.start_run():
                mlflow.log_param('test_param', 'ci_test')
                mlflow.log_metric('test_metric', 0.95)
                mlflow.log_metric('prompt_score', 0.85)
            
            print('✅ MLflow experiment logging successful')
            
        except Exception as e:
            print(f'❌ MLflow experiment test failed: {e}')
            exit(1)
        "

    - name: Mock LLM Pipeline Test
      run: |
        cd ${{ env.WORKING_DIR }}
        echo "🤖 Running mock LLM pipeline test..."
        
        # Create a mock version of the pipeline for CI
        cat > mock_pipeline_test.py << 'EOF'
        import mlflow
        import json
        import os
        from datetime import datetime
        
        # Set MLflow tracking URI
        mlflow.set_tracking_uri('http://localhost:5000')
        mlflow.set_experiment('ci-llmops-test')
        
        with mlflow.start_run(run_name=f"ci_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"):
            # Mock pipeline parameters
            mlflow.log_param("model_name", "llama2:7b")
            mlflow.log_param("pipeline_type", "prompt_engineering")
            mlflow.log_param("ci_test", True)
            
            # Mock evaluation metrics
            mlflow.log_metric("rouge1_avg", 0.75)
            mlflow.log_metric("rouge2_avg", 0.65)
            mlflow.log_metric("rougeL_avg", 0.70)
            mlflow.log_metric("response_rate", 1.0)
            mlflow.log_metric("best_prompt_score", 1.45)
            
            # Mock best prompt
            best_prompt = {
                "name": "friendly_helper",
                "template": "You are a friendly plant care helper...",
                "input_variables": ["query"],
                "score": 1.45
            }
            
            # Save as artifact
            with open("/tmp/best_prompt.json", "w") as f:
                json.dump(best_prompt, f, indent=2)
            
            mlflow.log_artifact("/tmp/best_prompt.json", "prompts")
            
            print("✅ Mock LLM pipeline completed successfully")
        EOF
        
        python mock_pipeline_test.py

    - name: Cleanup Services
      if: always()
      run: |
        cd ${{ env.WORKING_DIR }}/docker
        echo "🧹 Cleaning up services..."
        docker-compose down -v
        docker system prune -f

  # Stage 4: Deployment Readiness
  deployment-readiness:
    runs-on: ubuntu-latest
    needs: integration-testing
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Generate Deployment Summary
      run: |
        echo "📋 Generating deployment summary..."
        
        cat > deployment_summary.md << 'EOF'
        # 🚀 LLMOps Deployment Summary
        
        ## 📊 Pipeline Results
        - ✅ Infrastructure validation passed
        - ✅ LLMOps testing completed
        - ✅ Integration tests successful
        - ✅ Ready for deployment
        
        ## 🔧 Services Validated
        - **MLflow**: Experiment tracking ready
        - **Airflow**: DAG syntax validated
        - **API**: Flask endpoints tested
        - **Prompt Engineering**: Core functions verified
        
        ## 🎯 Next Steps
        1. Deploy to staging environment
        2. Run full LLM evaluation with Ollama
        3. Execute prompt A/B testing
        4. Monitor performance metrics
        
        ## 📈 Recommended Monitoring
        - Response quality (ROUGE scores)
        - API latency and throughput
        - User satisfaction ratings
        - Model performance drift
        
        ---
        
        **Deployment Time**: $(date)
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref_name }}
        EOF
        
        cat deployment_summary.md

    - name: Upload Deployment Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: llmops-deployment-artifacts
        path: |
          ${{ env.WORKING_DIR }}/docker/docker-compose.yml
          ${{ env.WORKING_DIR }}/docker/requirements.txt
          deployment_summary.md
        retention-days: 30

    - name: Send Deployment Notification
      run: |
        echo "📢 LLMOps Pipeline Deployment Ready!"
        echo "🎉 All stages completed successfully"
        echo "🚀 Ready for production deployment"
        echo ""
        echo "📋 Summary:"
        echo "  • Infrastructure: ✅ Validated"  
        echo "  • Testing: ✅ Passed"
        echo "  • Integration: ✅ Successful"
        echo "  • Deployment: ✅ Ready"
        echo ""
        echo "🔗 MLflow UI: http://localhost:5000"
        echo "🔗 Airflow UI: http://localhost:8080"
        echo "🔗 Plant Care API: http://localhost:8081"

# Optional: Nightly full pipeline test with actual LLM
  nightly-full-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Run Complete LLMOps Pipeline
      run: |
        cd ${{ env.WORKING_DIR }}/docker
        echo "🌙 Running nightly full LLMOps pipeline test..."
        
        # Start all services including Ollama
        docker-compose up -d
        
        # Wait for Ollama to be ready and pull model
        echo "⏳ Waiting for Ollama and pulling model..."
        sleep 60
        
        # Pull the LLM model
        docker exec ollama_server ollama pull llama2:7b
        
        # Run the full pipeline
        echo "🚀 Executing full LLMOps pipeline..."
        # This would run the actual pipeline with real LLM
        
        # Cleanup
        docker-compose down -v
        
        echo "✅ Nightly full test completed"
